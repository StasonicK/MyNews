apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: "de.mannodermaus.android-junit5"
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "com.eburg_soft.mynews"
        minSdkVersion 19
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        multiDexEnabled true


        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // The following argument makes the Android Test Orchestrator run its
        // "pm clear" command after each test invocation. This command ensures
        // that the app's state is completely cleared between tests.
        testInstrumentationRunnerArguments clearPackageData: 'true'

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [
                        "room.incremental"     : "true",
                        "room.expandProjection": "true",
                        "room.schemaLocation"  : "$projectDir/schemas".toString()]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        androidTest.java.srcDirs += "src/test-common/java"
        test.java.srcDirs += "src/test-common/java"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }

    testOptions {
// FIXME: Test framework quit unexpectedly
//      execution 'ANDROIDX_TEST_ORCHESTRATOR'
        unitTests {
            includeAndroidResources = true
            unitTests.returnDefaultValues = true
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/AL2.0'
        exclude 'META-INF/LGPL2.1'
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    // Android's basic libraries
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    // androidx.fragment
    def fragment_version = "1.2.5" // must use for container
    implementation "androidx.fragment:fragment-ktx:$fragment_version"

    // Material design
    def material_version = "1.2.1"
    implementation "com.google.android.material:material:$material_version"

    // Paging
    def paging_version = "1.0.1"
    implementation "android.arch.paging:runtime:$paging_version"

    // Coroutines
    def coroutines_version = '1.3.9'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    // Room DB
    def room_version = "2.2.5"
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    // optional - RxJava support for Room
    implementation "androidx.room:room-rxjava2:$room_version"

    //  ViewModel and LiveData
    def lifecycle_version = '2.2.0'
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"

    // Network
    def retrofit_version = '2.9.0'
    def ok_http_version = '4.9.0'
    def coroutine_call_adapter_factory_version = '0.9.2'
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.squareup.okhttp3:okhttp:$ok_http_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$ok_http_version"
    implementation 'com.google.code.gson:gson:2.8.6'
//    implementation("com.squareup.moshi:moshi-kotlin:1.11.0")
    implementation "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:$coroutine_call_adapter_factory_version"

    // Navigation
    def nav_version = "2.3.1"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    // DI Toothpick
    def toothpick_version = '3.1.0'
    implementation "com.github.stephanenicolas.toothpick:toothpick-runtime:$toothpick_version"
    implementation "com.github.stephanenicolas.toothpick:smoothie-androidx:$toothpick_version"
    kapt "com.github.stephanenicolas.toothpick:toothpick-compiler:$toothpick_version"

    //  Logging TimberKt
    implementation 'com.github.ajalt:timberkt:1.5.1'

    // -------- INSTRUMENTATION TESTS (use JUnit4)

    //  Architecture components tests
    def androidx_arch_test_version = "2.1.0"
    testImplementation "androidx.arch.core:core-testing:$androidx_arch_test_version"
    androidTestImplementation "androidx.arch.core:core-testing:$androidx_arch_test_version"

    // Local unit tests (use JUnit5)
    // JUnit Jupiter
    def junit5_version = '5.7.0'
    testImplementation "org.junit.jupiter:junit-jupiter-engine:$junit5_version"
    testImplementation "org.junit.vintage:junit-vintage-engine:$junit5_version"
    testImplementation 'org.junit.platform:junit-platform-launcher:1.7.0'
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit5_version"
    // (Optional) If you need "Parameterized Tests"
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.7.0'

    //  MockK tests
    def mockk_version = '1.10.2'
    testImplementation "io.mockk:mockk:$mockk_version"
    androidTestImplementation "io.mockk:mockk-android:$mockk_version"

    //  Instrumental tests
    testImplementation 'junit:junit:4.13.1'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'

    def espresso_version = '3.3.0'
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espresso_version"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espresso_version"

    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'

    androidTestImplementation 'androidx.test.ext:junit-ktx:1.1.2'
    testImplementation "androidx.test.ext:junit-ktx:1.1.2"
    testImplementation "androidx.test:core-ktx:1.3.0"

    debugImplementation("androidx.fragment:fragment-testing:1.3.0-beta01")
    debugImplementation("androidx.fragment:fragment-ktx:1.3.0-beta01")
    debugImplementation("androidx.test:core:1.3.0")
    debugImplementation("androidx.test:rules:1.3.0")
    debugImplementation("androidx.test:runner:1.3.0")
}